// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_call_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_call_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_call_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_call_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_call_2eproto;
namespace call {
class CallState;
class CallStateDefaultTypeInternal;
extern CallStateDefaultTypeInternal _CallState_default_instance_;
class Notice;
class NoticeDefaultTypeInternal;
extern NoticeDefaultTypeInternal _Notice_default_instance_;
}  // namespace call
PROTOBUF_NAMESPACE_OPEN
template<> ::call::CallState* Arena::CreateMaybeMessage<::call::CallState>(Arena*);
template<> ::call::Notice* Arena::CreateMaybeMessage<::call::Notice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace call {

enum CallState_State : int {
  CallState_State_ANSWER = 1,
  CallState_State_REJECT = 2,
  CallState_State_SPEAKER = 3
};
bool CallState_State_IsValid(int value);
constexpr CallState_State CallState_State_State_MIN = CallState_State_ANSWER;
constexpr CallState_State CallState_State_State_MAX = CallState_State_SPEAKER;
constexpr int CallState_State_State_ARRAYSIZE = CallState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallState_State_descriptor();
template<typename T>
inline const std::string& CallState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CallState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CallState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CallState_State_descriptor(), enum_t_value);
}
inline bool CallState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CallState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CallState_State>(
    CallState_State_descriptor(), name, value);
}
// ===================================================================

class Notice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:call.Notice) */ {
 public:
  inline Notice() : Notice(nullptr) {}
  virtual ~Notice();

  Notice(const Notice& from);
  Notice(Notice&& from) noexcept
    : Notice() {
    *this = ::std::move(from);
  }

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notice& operator=(Notice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notice& default_instance();

  static inline const Notice* internal_default_instance() {
    return reinterpret_cast<const Notice*>(
               &_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Notice& a, Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(Notice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notice* New() const final {
    return CreateMaybeMessage<Notice>(nullptr);
  }

  Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "call.Notice";
  }
  protected:
  explicit Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_2eproto);
    return ::descriptor_table_call_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 2,
    kPeopleFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // required string phone = 2;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // optional string people = 3;
  bool has_people() const;
  private:
  bool _internal_has_people() const;
  public:
  void clear_people();
  const std::string& people() const;
  void set_people(const std::string& value);
  void set_people(std::string&& value);
  void set_people(const char* value);
  void set_people(const char* value, size_t size);
  std::string* mutable_people();
  std::string* release_people();
  void set_allocated_people(std::string* people);
  private:
  const std::string& _internal_people() const;
  void _internal_set_people(const std::string& value);
  std::string* _internal_mutable_people();
  public:

  // required .proto.time.UnixTimestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::proto::time::UnixTimestamp& timestamp() const;
  ::proto::time::UnixTimestamp* release_timestamp();
  ::proto::time::UnixTimestamp* mutable_timestamp();
  void set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp);
  private:
  const ::proto::time::UnixTimestamp& _internal_timestamp() const;
  ::proto::time::UnixTimestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::proto::time::UnixTimestamp* timestamp);
  ::proto::time::UnixTimestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:call.Notice)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr people_;
  ::proto::time::UnixTimestamp* timestamp_;
  friend struct ::TableStruct_call_2eproto;
};
// -------------------------------------------------------------------

class CallState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:call.CallState) */ {
 public:
  inline CallState() : CallState(nullptr) {}
  virtual ~CallState();

  CallState(const CallState& from);
  CallState(CallState&& from) noexcept
    : CallState() {
    *this = ::std::move(from);
  }

  inline CallState& operator=(const CallState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallState& operator=(CallState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallState& default_instance();

  static inline const CallState* internal_default_instance() {
    return reinterpret_cast<const CallState*>(
               &_CallState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CallState& a, CallState& b) {
    a.Swap(&b);
  }
  inline void Swap(CallState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallState* New() const final {
    return CreateMaybeMessage<CallState>(nullptr);
  }

  CallState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallState& from);
  void MergeFrom(const CallState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "call.CallState";
  }
  protected:
  explicit CallState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_call_2eproto);
    return ::descriptor_table_call_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CallState_State State;
  static constexpr State ANSWER =
    CallState_State_ANSWER;
  static constexpr State REJECT =
    CallState_State_REJECT;
  static constexpr State SPEAKER =
    CallState_State_SPEAKER;
  static inline bool State_IsValid(int value) {
    return CallState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CallState_State_State_MIN;
  static constexpr State State_MAX =
    CallState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CallState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CallState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CallState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CallState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // required .call.CallState.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::call::CallState_State state() const;
  void set_state(::call::CallState_State value);
  private:
  ::call::CallState_State _internal_state() const;
  void _internal_set_state(::call::CallState_State value);
  public:

  // @@protoc_insertion_point(class_scope:call.CallState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int state_;
  friend struct ::TableStruct_call_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notice

// required .proto.time.UnixTimestamp timestamp = 1;
inline bool Notice::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Notice::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::proto::time::UnixTimestamp& Notice::_internal_timestamp() const {
  const ::proto::time::UnixTimestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::time::UnixTimestamp&>(
      ::proto::time::_UnixTimestamp_default_instance_);
}
inline const ::proto::time::UnixTimestamp& Notice::timestamp() const {
  // @@protoc_insertion_point(field_get:call.Notice.timestamp)
  return _internal_timestamp();
}
inline void Notice::unsafe_arena_set_allocated_timestamp(
    ::proto::time::UnixTimestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:call.Notice.timestamp)
}
inline ::proto::time::UnixTimestamp* Notice::release_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::time::UnixTimestamp* Notice::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:call.Notice.timestamp)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::proto::time::UnixTimestamp* Notice::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000004u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::time::UnixTimestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::proto::time::UnixTimestamp* Notice::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:call.Notice.timestamp)
  return _internal_mutable_timestamp();
}
inline void Notice::set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:call.Notice.timestamp)
}

// required string phone = 2;
inline bool Notice::_internal_has_phone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Notice::has_phone() const {
  return _internal_has_phone();
}
inline void Notice::clear_phone() {
  phone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Notice::phone() const {
  // @@protoc_insertion_point(field_get:call.Notice.phone)
  return _internal_phone();
}
inline void Notice::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:call.Notice.phone)
}
inline std::string* Notice::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:call.Notice.phone)
  return _internal_mutable_phone();
}
inline const std::string& Notice::_internal_phone() const {
  return phone_.Get();
}
inline void Notice::_internal_set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notice::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:call.Notice.phone)
}
inline void Notice::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:call.Notice.phone)
}
inline void Notice::set_phone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:call.Notice.phone)
}
inline std::string* Notice::_internal_mutable_phone() {
  _has_bits_[0] |= 0x00000001u;
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notice::release_phone() {
  // @@protoc_insertion_point(field_release:call.Notice.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notice::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:call.Notice.phone)
}

// optional string people = 3;
inline bool Notice::_internal_has_people() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Notice::has_people() const {
  return _internal_has_people();
}
inline void Notice::clear_people() {
  people_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Notice::people() const {
  // @@protoc_insertion_point(field_get:call.Notice.people)
  return _internal_people();
}
inline void Notice::set_people(const std::string& value) {
  _internal_set_people(value);
  // @@protoc_insertion_point(field_set:call.Notice.people)
}
inline std::string* Notice::mutable_people() {
  // @@protoc_insertion_point(field_mutable:call.Notice.people)
  return _internal_mutable_people();
}
inline const std::string& Notice::_internal_people() const {
  return people_.Get();
}
inline void Notice::_internal_set_people(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notice::set_people(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:call.Notice.people)
}
inline void Notice::set_people(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:call.Notice.people)
}
inline void Notice::set_people(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:call.Notice.people)
}
inline std::string* Notice::_internal_mutable_people() {
  _has_bits_[0] |= 0x00000002u;
  return people_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notice::release_people() {
  // @@protoc_insertion_point(field_release:call.Notice.people)
  if (!_internal_has_people()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return people_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notice::set_allocated_people(std::string* people) {
  if (people != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  people_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), people,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:call.Notice.people)
}

// -------------------------------------------------------------------

// CallState

// required .call.CallState.State state = 1;
inline bool CallState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallState::has_state() const {
  return _internal_has_state();
}
inline void CallState::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::call::CallState_State CallState::_internal_state() const {
  return static_cast< ::call::CallState_State >(state_);
}
inline ::call::CallState_State CallState::state() const {
  // @@protoc_insertion_point(field_get:call.CallState.state)
  return _internal_state();
}
inline void CallState::_internal_set_state(::call::CallState_State value) {
  assert(::call::CallState_State_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void CallState::set_state(::call::CallState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:call.CallState.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace call

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::call::CallState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::call::CallState_State>() {
  return ::call::CallState_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_call_2eproto
