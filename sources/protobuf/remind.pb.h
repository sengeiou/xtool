// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remind_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remind_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remind_2eproto;
namespace remind {
class Battery;
class BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace remind
PROTOBUF_NAMESPACE_OPEN
template<> ::remind::Battery* Arena::CreateMaybeMessage<::remind::Battery>(Arena*);
template<> ::remind::Call* Arena::CreateMaybeMessage<::remind::Call>(Arena*);
template<> ::remind::Message* Arena::CreateMaybeMessage<::remind::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remind {

enum Message_Type : int {
  Message_Type_TEXT = 0,
  Message_Type_FACEBOOK = 1,
  Message_Type_WECHAT = 2,
  Message_Type_QQ = 3
};
bool Message_Type_IsValid(int value);
constexpr Message_Type Message_Type_Type_MIN = Message_Type_TEXT;
constexpr Message_Type Message_Type_Type_MAX = Message_Type_QQ;
constexpr int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor();
template<typename T>
inline const std::string& Message_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_Type_descriptor(), enum_t_value);
}
inline bool Message_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Call PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remind.Call) */ {
 public:
  inline Call() : Call(nullptr) {}
  virtual ~Call();

  Call(const Call& from);
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  inline Call& operator=(Call&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Call& default_instance();

  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }
  inline void Swap(Call* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Call* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(nullptr);
  }

  Call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remind.Call";
  }
  protected:
  explicit Call(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remind_2eproto);
    return ::descriptor_table_remind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 2,
    kPeopleFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // required string phone = 2;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // optional string people = 3;
  bool has_people() const;
  private:
  bool _internal_has_people() const;
  public:
  void clear_people();
  const std::string& people() const;
  void set_people(const std::string& value);
  void set_people(std::string&& value);
  void set_people(const char* value);
  void set_people(const char* value, size_t size);
  std::string* mutable_people();
  std::string* release_people();
  void set_allocated_people(std::string* people);
  private:
  const std::string& _internal_people() const;
  void _internal_set_people(const std::string& value);
  std::string* _internal_mutable_people();
  public:

  // required .proto.time.UnixTimestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::proto::time::UnixTimestamp& timestamp() const;
  ::proto::time::UnixTimestamp* release_timestamp();
  ::proto::time::UnixTimestamp* mutable_timestamp();
  void set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp);
  private:
  const ::proto::time::UnixTimestamp& _internal_timestamp() const;
  ::proto::time::UnixTimestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::proto::time::UnixTimestamp* timestamp);
  ::proto::time::UnixTimestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:remind.Call)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr people_;
  ::proto::time::UnixTimestamp* timestamp_;
  friend struct ::TableStruct_remind_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remind.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remind.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remind_2eproto);
    return ::descriptor_table_remind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static constexpr Type TEXT =
    Message_Type_TEXT;
  static constexpr Type FACEBOOK =
    Message_Type_FACEBOOK;
  static constexpr Type WECHAT =
    Message_Type_WECHAT;
  static constexpr Type QQ =
    Message_Type_QQ;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Message_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Message_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Message_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 3,
    kTextFieldNumber = 4,
    kPeopleFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string phone = 3;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // required string text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string people = 5;
  bool has_people() const;
  private:
  bool _internal_has_people() const;
  public:
  void clear_people();
  const std::string& people() const;
  void set_people(const std::string& value);
  void set_people(std::string&& value);
  void set_people(const char* value);
  void set_people(const char* value, size_t size);
  std::string* mutable_people();
  std::string* release_people();
  void set_allocated_people(std::string* people);
  private:
  const std::string& _internal_people() const;
  void _internal_set_people(const std::string& value);
  std::string* _internal_mutable_people();
  public:

  // required .proto.time.UnixTimestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::proto::time::UnixTimestamp& timestamp() const;
  ::proto::time::UnixTimestamp* release_timestamp();
  ::proto::time::UnixTimestamp* mutable_timestamp();
  void set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp);
  private:
  const ::proto::time::UnixTimestamp& _internal_timestamp() const;
  ::proto::time::UnixTimestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::proto::time::UnixTimestamp* timestamp);
  ::proto::time::UnixTimestamp* unsafe_arena_release_timestamp();

  // required .remind.Message.Type type = 2 [default = TEXT];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::remind::Message_Type type() const;
  void set_type(::remind::Message_Type value);
  private:
  ::remind::Message_Type _internal_type() const;
  void _internal_set_type(::remind::Message_Type value);
  public:

  // @@protoc_insertion_point(class_scope:remind.Message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr people_;
  ::proto::time::UnixTimestamp* timestamp_;
  int type_;
  friend struct ::TableStruct_remind_2eproto;
};
// -------------------------------------------------------------------

class Battery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remind.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  virtual ~Battery();

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Battery& default_instance();

  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Battery* New() const final {
    return CreateMaybeMessage<Battery>(nullptr);
  }

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Battery& from);
  void MergeFrom(const Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remind.Battery";
  }
  protected:
  explicit Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remind_2eproto);
    return ::descriptor_table_remind_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentFieldNumber = 1,
  };
  // required uint32 percent = 1;
  bool has_percent() const;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 percent() const;
  void set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_percent() const;
  void _internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remind.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 percent_;
  friend struct ::TableStruct_remind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Call

// required .proto.time.UnixTimestamp timestamp = 1;
inline bool Call::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Call::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::proto::time::UnixTimestamp& Call::_internal_timestamp() const {
  const ::proto::time::UnixTimestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::time::UnixTimestamp&>(
      ::proto::time::_UnixTimestamp_default_instance_);
}
inline const ::proto::time::UnixTimestamp& Call::timestamp() const {
  // @@protoc_insertion_point(field_get:remind.Call.timestamp)
  return _internal_timestamp();
}
inline void Call::unsafe_arena_set_allocated_timestamp(
    ::proto::time::UnixTimestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remind.Call.timestamp)
}
inline ::proto::time::UnixTimestamp* Call::release_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::time::UnixTimestamp* Call::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:remind.Call.timestamp)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::proto::time::UnixTimestamp* Call::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000004u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::time::UnixTimestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::proto::time::UnixTimestamp* Call::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:remind.Call.timestamp)
  return _internal_mutable_timestamp();
}
inline void Call::set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:remind.Call.timestamp)
}

// required string phone = 2;
inline bool Call::_internal_has_phone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Call::has_phone() const {
  return _internal_has_phone();
}
inline void Call::clear_phone() {
  phone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Call::phone() const {
  // @@protoc_insertion_point(field_get:remind.Call.phone)
  return _internal_phone();
}
inline void Call::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:remind.Call.phone)
}
inline std::string* Call::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:remind.Call.phone)
  return _internal_mutable_phone();
}
inline const std::string& Call::_internal_phone() const {
  return phone_.Get();
}
inline void Call::_internal_set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Call::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remind.Call.phone)
}
inline void Call::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remind.Call.phone)
}
inline void Call::set_phone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remind.Call.phone)
}
inline std::string* Call::_internal_mutable_phone() {
  _has_bits_[0] |= 0x00000001u;
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Call::release_phone() {
  // @@protoc_insertion_point(field_release:remind.Call.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Call::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remind.Call.phone)
}

// optional string people = 3;
inline bool Call::_internal_has_people() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Call::has_people() const {
  return _internal_has_people();
}
inline void Call::clear_people() {
  people_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Call::people() const {
  // @@protoc_insertion_point(field_get:remind.Call.people)
  return _internal_people();
}
inline void Call::set_people(const std::string& value) {
  _internal_set_people(value);
  // @@protoc_insertion_point(field_set:remind.Call.people)
}
inline std::string* Call::mutable_people() {
  // @@protoc_insertion_point(field_mutable:remind.Call.people)
  return _internal_mutable_people();
}
inline const std::string& Call::_internal_people() const {
  return people_.Get();
}
inline void Call::_internal_set_people(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Call::set_people(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remind.Call.people)
}
inline void Call::set_people(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remind.Call.people)
}
inline void Call::set_people(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remind.Call.people)
}
inline std::string* Call::_internal_mutable_people() {
  _has_bits_[0] |= 0x00000002u;
  return people_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Call::release_people() {
  // @@protoc_insertion_point(field_release:remind.Call.people)
  if (!_internal_has_people()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return people_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Call::set_allocated_people(std::string* people) {
  if (people != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  people_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), people,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remind.Call.people)
}

// -------------------------------------------------------------------

// Message

// required .proto.time.UnixTimestamp timestamp = 1;
inline bool Message::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Message::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::proto::time::UnixTimestamp& Message::_internal_timestamp() const {
  const ::proto::time::UnixTimestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::time::UnixTimestamp&>(
      ::proto::time::_UnixTimestamp_default_instance_);
}
inline const ::proto::time::UnixTimestamp& Message::timestamp() const {
  // @@protoc_insertion_point(field_get:remind.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::unsafe_arena_set_allocated_timestamp(
    ::proto::time::UnixTimestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remind.Message.timestamp)
}
inline ::proto::time::UnixTimestamp* Message::release_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::time::UnixTimestamp* Message::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:remind.Message.timestamp)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::time::UnixTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::proto::time::UnixTimestamp* Message::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000008u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::time::UnixTimestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::proto::time::UnixTimestamp* Message::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:remind.Message.timestamp)
  return _internal_mutable_timestamp();
}
inline void Message::set_allocated_timestamp(::proto::time::UnixTimestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:remind.Message.timestamp)
}

// required .remind.Message.Type type = 2 [default = TEXT];
inline bool Message::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Message::has_type() const {
  return _internal_has_type();
}
inline void Message::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::remind::Message_Type Message::_internal_type() const {
  return static_cast< ::remind::Message_Type >(type_);
}
inline ::remind::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:remind.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::remind::Message_Type value) {
  assert(::remind::Message_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Message::set_type(::remind::Message_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:remind.Message.type)
}

// required string phone = 3;
inline bool Message::_internal_has_phone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_phone() const {
  return _internal_has_phone();
}
inline void Message::clear_phone() {
  phone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::phone() const {
  // @@protoc_insertion_point(field_get:remind.Message.phone)
  return _internal_phone();
}
inline void Message::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:remind.Message.phone)
}
inline std::string* Message::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:remind.Message.phone)
  return _internal_mutable_phone();
}
inline const std::string& Message::_internal_phone() const {
  return phone_.Get();
}
inline void Message::_internal_set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remind.Message.phone)
}
inline void Message::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remind.Message.phone)
}
inline void Message::set_phone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remind.Message.phone)
}
inline std::string* Message::_internal_mutable_phone() {
  _has_bits_[0] |= 0x00000001u;
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_phone() {
  // @@protoc_insertion_point(field_release:remind.Message.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remind.Message.phone)
}

// required string text = 4;
inline bool Message::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_text() const {
  return _internal_has_text();
}
inline void Message::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message::text() const {
  // @@protoc_insertion_point(field_get:remind.Message.text)
  return _internal_text();
}
inline void Message::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:remind.Message.text)
}
inline std::string* Message::mutable_text() {
  // @@protoc_insertion_point(field_mutable:remind.Message.text)
  return _internal_mutable_text();
}
inline const std::string& Message::_internal_text() const {
  return text_.Get();
}
inline void Message::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remind.Message.text)
}
inline void Message::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remind.Message.text)
}
inline void Message::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remind.Message.text)
}
inline std::string* Message::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_text() {
  // @@protoc_insertion_point(field_release:remind.Message.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remind.Message.text)
}

// optional string people = 5;
inline bool Message::_internal_has_people() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_people() const {
  return _internal_has_people();
}
inline void Message::clear_people() {
  people_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message::people() const {
  // @@protoc_insertion_point(field_get:remind.Message.people)
  return _internal_people();
}
inline void Message::set_people(const std::string& value) {
  _internal_set_people(value);
  // @@protoc_insertion_point(field_set:remind.Message.people)
}
inline std::string* Message::mutable_people() {
  // @@protoc_insertion_point(field_mutable:remind.Message.people)
  return _internal_mutable_people();
}
inline const std::string& Message::_internal_people() const {
  return people_.Get();
}
inline void Message::_internal_set_people(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_people(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  people_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remind.Message.people)
}
inline void Message::set_people(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remind.Message.people)
}
inline void Message::set_people(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  people_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remind.Message.people)
}
inline std::string* Message::_internal_mutable_people() {
  _has_bits_[0] |= 0x00000004u;
  return people_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_people() {
  // @@protoc_insertion_point(field_release:remind.Message.people)
  if (!_internal_has_people()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return people_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_people(std::string* people) {
  if (people != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  people_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), people,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remind.Message.people)
}

// -------------------------------------------------------------------

// Battery

// required uint32 percent = 1;
inline bool Battery::_internal_has_percent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Battery::has_percent() const {
  return _internal_has_percent();
}
inline void Battery::clear_percent() {
  percent_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::_internal_percent() const {
  return percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::percent() const {
  // @@protoc_insertion_point(field_get:remind.Battery.percent)
  return _internal_percent();
}
inline void Battery::_internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  percent_ = value;
}
inline void Battery::set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:remind.Battery.percent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remind

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::remind::Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remind::Message_Type>() {
  return ::remind::Message_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remind_2eproto
