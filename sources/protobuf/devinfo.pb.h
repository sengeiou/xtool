// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devinfo_2eproto;
namespace info {
class Battery;
class BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace info
PROTOBUF_NAMESPACE_OPEN
template<> ::info::Battery* Arena::CreateMaybeMessage<::info::Battery>(Arena*);
template<> ::info::Device* Arena::CreateMaybeMessage<::info::Device>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace info {

enum Device_Type : int {
  Device_Type_INVALID = 0,
  Device_Type_BAND = 1,
  Device_Type_WATCH = 2,
  Device_Type_EARPHONES = 3
};
bool Device_Type_IsValid(int value);
constexpr Device_Type Device_Type_Type_MIN = Device_Type_INVALID;
constexpr Device_Type Device_Type_Type_MAX = Device_Type_EARPHONES;
constexpr int Device_Type_Type_ARRAYSIZE = Device_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Type_descriptor();
template<typename T>
inline const std::string& Device_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Type_descriptor(), enum_t_value);
}
inline bool Device_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Type>(
    Device_Type_descriptor(), name, value);
}
enum Device_Model : int {
  Device_Model_DM_INVALID = 0,
  Device_Model_DM_APOLLO3P = 1
};
bool Device_Model_IsValid(int value);
constexpr Device_Model Device_Model_Model_MIN = Device_Model_DM_INVALID;
constexpr Device_Model Device_Model_Model_MAX = Device_Model_DM_APOLLO3P;
constexpr int Device_Model_Model_ARRAYSIZE = Device_Model_Model_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Model_descriptor();
template<typename T>
inline const std::string& Device_Model_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Model>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Model_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Model_descriptor(), enum_t_value);
}
inline bool Device_Model_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Model* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Model>(
    Device_Model_descriptor(), name, value);
}
enum Battery_Status : int {
  Battery_Status_IDLE = 0,
  Battery_Status_CHARGING = 1,
  Battery_Status_CHARGE_COMPLETED = 2
};
bool Battery_Status_IsValid(int value);
constexpr Battery_Status Battery_Status_Status_MIN = Battery_Status_IDLE;
constexpr Battery_Status Battery_Status_Status_MAX = Battery_Status_CHARGE_COMPLETED;
constexpr int Battery_Status_Status_ARRAYSIZE = Battery_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Battery_Status_descriptor();
template<typename T>
inline const std::string& Battery_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Battery_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Battery_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Battery_Status_descriptor(), enum_t_value);
}
inline bool Battery_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Battery_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Battery_Status>(
    Battery_Status_descriptor(), name, value);
}
// ===================================================================

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:info.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "info.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devinfo_2eproto);
    return ::descriptor_table_devinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_Type Type;
  static constexpr Type INVALID =
    Device_Type_INVALID;
  static constexpr Type BAND =
    Device_Type_BAND;
  static constexpr Type WATCH =
    Device_Type_WATCH;
  static constexpr Type EARPHONES =
    Device_Type_EARPHONES;
  static inline bool Type_IsValid(int value) {
    return Device_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Device_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Device_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Device_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Device_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Device_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Device_Type_Parse(name, value);
  }

  typedef Device_Model Model;
  static constexpr Model DM_INVALID =
    Device_Model_DM_INVALID;
  static constexpr Model DM_APOLLO3P =
    Device_Model_DM_APOLLO3P;
  static inline bool Model_IsValid(int value) {
    return Device_Model_IsValid(value);
  }
  static constexpr Model Model_MIN =
    Device_Model_Model_MIN;
  static constexpr Model Model_MAX =
    Device_Model_Model_MAX;
  static constexpr int Model_ARRAYSIZE =
    Device_Model_Model_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Model_descriptor() {
    return Device_Model_descriptor();
  }
  template<typename T>
  static inline const std::string& Model_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Model>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Model_Name.");
    return Device_Model_Name(enum_t_value);
  }
  static inline bool Model_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Model* value) {
    return Device_Model_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 7,
    kMacFieldNumber = 8,
    kTypeFieldNumber = 1,
    kModelFieldNumber = 2,
    kFirmwareVerFieldNumber = 3,
    kHardwareVerFieldNumber = 4,
  };
  // optional bytes sn = 7;
  bool has_sn() const;
  private:
  bool _internal_has_sn() const;
  public:
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const void* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // optional bytes mac = 8;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional .info.Device.Type type = 1 [default = INVALID];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::info::Device_Type type() const;
  void set_type(::info::Device_Type value);
  private:
  ::info::Device_Type _internal_type() const;
  void _internal_set_type(::info::Device_Type value);
  public:

  // optional .info.Device.Model model = 2 [default = DM_INVALID];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::info::Device_Model model() const;
  void set_model(::info::Device_Model value);
  private:
  ::info::Device_Model _internal_model() const;
  void _internal_set_model(::info::Device_Model value);
  public:

  // optional uint32 firmware_ver = 3;
  bool has_firmware_ver() const;
  private:
  bool _internal_has_firmware_ver() const;
  public:
  void clear_firmware_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware_ver() const;
  void set_firmware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_firmware_ver() const;
  void _internal_set_firmware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hardware_ver = 4;
  bool has_hardware_ver() const;
  private:
  bool _internal_has_hardware_ver() const;
  public:
  void clear_hardware_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 hardware_ver() const;
  void set_hardware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hardware_ver() const;
  void _internal_set_hardware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:info.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  int type_;
  int model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 firmware_ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hardware_ver_;
  friend struct ::TableStruct_devinfo_2eproto;
};
// -------------------------------------------------------------------

class Battery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:info.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  virtual ~Battery();

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Battery& default_instance();

  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Battery* New() const final {
    return CreateMaybeMessage<Battery>(nullptr);
  }

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Battery& from);
  void MergeFrom(const Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "info.Battery";
  }
  protected:
  explicit Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devinfo_2eproto);
    return ::descriptor_table_devinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Battery_Status Status;
  static constexpr Status IDLE =
    Battery_Status_IDLE;
  static constexpr Status CHARGING =
    Battery_Status_CHARGING;
  static constexpr Status CHARGE_COMPLETED =
    Battery_Status_CHARGE_COMPLETED;
  static inline bool Status_IsValid(int value) {
    return Battery_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Battery_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Battery_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Battery_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Battery_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Battery_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Battery_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // required uint32 level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:info.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_devinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// optional .info.Device.Type type = 1 [default = INVALID];
inline bool Device::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Device::has_type() const {
  return _internal_has_type();
}
inline void Device::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::info::Device_Type Device::_internal_type() const {
  return static_cast< ::info::Device_Type >(type_);
}
inline ::info::Device_Type Device::type() const {
  // @@protoc_insertion_point(field_get:info.Device.type)
  return _internal_type();
}
inline void Device::_internal_set_type(::info::Device_Type value) {
  assert(::info::Device_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Device::set_type(::info::Device_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:info.Device.type)
}

// optional .info.Device.Model model = 2 [default = DM_INVALID];
inline bool Device::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Device::has_model() const {
  return _internal_has_model();
}
inline void Device::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::info::Device_Model Device::_internal_model() const {
  return static_cast< ::info::Device_Model >(model_);
}
inline ::info::Device_Model Device::model() const {
  // @@protoc_insertion_point(field_get:info.Device.model)
  return _internal_model();
}
inline void Device::_internal_set_model(::info::Device_Model value) {
  assert(::info::Device_Model_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  model_ = value;
}
inline void Device::set_model(::info::Device_Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:info.Device.model)
}

// optional uint32 firmware_ver = 3;
inline bool Device::_internal_has_firmware_ver() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Device::has_firmware_ver() const {
  return _internal_has_firmware_ver();
}
inline void Device::clear_firmware_ver() {
  firmware_ver_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_firmware_ver() const {
  return firmware_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::firmware_ver() const {
  // @@protoc_insertion_point(field_get:info.Device.firmware_ver)
  return _internal_firmware_ver();
}
inline void Device::_internal_set_firmware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  firmware_ver_ = value;
}
inline void Device::set_firmware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_firmware_ver(value);
  // @@protoc_insertion_point(field_set:info.Device.firmware_ver)
}

// optional uint32 hardware_ver = 4;
inline bool Device::_internal_has_hardware_ver() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Device::has_hardware_ver() const {
  return _internal_has_hardware_ver();
}
inline void Device::clear_hardware_ver() {
  hardware_ver_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_hardware_ver() const {
  return hardware_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::hardware_ver() const {
  // @@protoc_insertion_point(field_get:info.Device.hardware_ver)
  return _internal_hardware_ver();
}
inline void Device::_internal_set_hardware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  hardware_ver_ = value;
}
inline void Device::set_hardware_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hardware_ver(value);
  // @@protoc_insertion_point(field_set:info.Device.hardware_ver)
}

// optional bytes sn = 7;
inline bool Device::_internal_has_sn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Device::has_sn() const {
  return _internal_has_sn();
}
inline void Device::clear_sn() {
  sn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Device::sn() const {
  // @@protoc_insertion_point(field_get:info.Device.sn)
  return _internal_sn();
}
inline void Device::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:info.Device.sn)
}
inline std::string* Device::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:info.Device.sn)
  return _internal_mutable_sn();
}
inline const std::string& Device::_internal_sn() const {
  return sn_.Get();
}
inline void Device::_internal_set_sn(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_sn(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:info.Device.sn)
}
inline void Device::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:info.Device.sn)
}
inline void Device::set_sn(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:info.Device.sn)
}
inline std::string* Device::_internal_mutable_sn() {
  _has_bits_[0] |= 0x00000001u;
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_sn() {
  // @@protoc_insertion_point(field_release:info.Device.sn)
  if (!_internal_has_sn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:info.Device.sn)
}

// optional bytes mac = 8;
inline bool Device::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Device::has_mac() const {
  return _internal_has_mac();
}
inline void Device::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Device::mac() const {
  // @@protoc_insertion_point(field_get:info.Device.mac)
  return _internal_mac();
}
inline void Device::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:info.Device.mac)
}
inline std::string* Device::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:info.Device.mac)
  return _internal_mutable_mac();
}
inline const std::string& Device::_internal_mac() const {
  return mac_.Get();
}
inline void Device::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_mac(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:info.Device.mac)
}
inline void Device::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:info.Device.mac)
}
inline void Device::set_mac(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:info.Device.mac)
}
inline std::string* Device::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000002u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_mac() {
  // @@protoc_insertion_point(field_release:info.Device.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:info.Device.mac)
}

// -------------------------------------------------------------------

// Battery

// required uint32 level = 1;
inline bool Battery::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Battery::has_level() const {
  return _internal_has_level();
}
inline void Battery::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::level() const {
  // @@protoc_insertion_point(field_get:info.Battery.level)
  return _internal_level();
}
inline void Battery::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void Battery::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:info.Battery.level)
}

// optional uint32 status = 2;
inline bool Battery::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Battery::has_status() const {
  return _internal_has_status();
}
inline void Battery::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Battery::status() const {
  // @@protoc_insertion_point(field_get:info.Battery.status)
  return _internal_status();
}
inline void Battery::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void Battery::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:info.Battery.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace info

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::info::Device_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::info::Device_Type>() {
  return ::info::Device_Type_descriptor();
}
template <> struct is_proto_enum< ::info::Device_Model> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::info::Device_Model>() {
  return ::info::Device_Model_descriptor();
}
template <> struct is_proto_enum< ::info::Battery_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::info::Battery_Status>() {
  return ::info::Battery_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devinfo_2eproto
